@page
@model StudentPortfolio.Pages.Goals.GoalsModel

@{
    ViewData["Title"] = "Goals";
}

@section GoalsNav {
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" asp-page="/Goals/Goals">Goals</a>
    </li>
}

<div class="d-flex align-items-end gap-3">
    <!-- get puts selectedYear=xxxx in the url for the controller to use -->
    <form method="get" class="d-flex align-items-end">
        <div class="me-2">
            <label for="select-year" class="form-label fw-bold mb-0 me-2">Filter by year</label>
            <select id="select-year" class="form-select w-auto d-inline-block" name="selectedYear" onchange="this.form.submit()">
                @if (Model.PossibleYears != null)
                {
                    @foreach (var year in Model.PossibleYears)
                    {
                        <option value="@year" selected="@(Model.selectedYear == year)">@year</option>
                    }
                }
            </select>
        </div>
    </form>

    @if (Model.CDP.FirstOrDefault() != null && Model.CDP.FirstOrDefault().Year == Model.thisYear)
    {
        <a class="btn btn-primary" asp-page="EditCDP">Update Career Plan</a>
    }
    else
    {
        <a class="btn btn-primary" asp-page="CreateCDP">New Career Plan</a>
    }
</div>


<div class="info-container">
    <div class="info-row">
        <label for="prof">Professional Interests:</label>
        <textarea id="prof" class="form-control" readonly>@Html.DisplayFor(model => model.CDP.FirstOrDefault().ProfessionalInterests)</textarea>
    </div>

    <div class="info-row">
        <label for="emp">Employers of Interest:</label>
        <textarea id="emp" class="form-control" readonly>@Html.DisplayFor(model => model.CDP.FirstOrDefault().EmployersOfInterest)</textarea>
    </div>

    <div class="info-row">
        <label for="net">Networking Plan:</label>
        <textarea id="net" class="form-control" readonly>@Html.DisplayFor(model => model.CDP.FirstOrDefault().NetworkingPlan)</textarea>
    </div>

    <div class="info-row">
        <label for="per">Personal Values:</label>
        <textarea id="per" class="form-control" readonly>@Html.DisplayFor(model => model.CDP.FirstOrDefault().PersonalValues)</textarea>
    </div>

    <div class="info-row">
        <label for="extra">Extracurricular:</label>
        <textarea id="extra" class="form-control" readonly>@Html.DisplayFor(model => model.CDP.FirstOrDefault().Extracurricular)</textarea>
    </div>

    <div class="info-row">
        <label for="dev">Development Focus for This Year:</label>
        <textarea id="dev" class="form-control large" readonly>@Html.DisplayFor(model => model.CDP.FirstOrDefault().DevelopmentFocus)</textarea>
    </div>
</div>

<a class="btn btn-primary" asp-page="Create">New Goal</a>

<div class="input-container mb-3">
    <h3>Date Range</h3>
    <form method="get" class="d-flex align-items-center gap-3">
        <label for="fromInput">From:</label>
        <input class="form-control w-auto" type="month" id="fromInput" name="from" value="@Model.From">

        <label for="toInput">To:</label>
        <input class="form-control w-auto" type="month" id="toInput" name="to" value="=@Model.To">
        <button type="submit" class="btn btn-primary">Filter</button>
    </form>
</div>

<table class="table table-bordered table-striped">
    <thead>
        <tr>
            <th>
                SMART Goal
            </th>
            <th>
                Action Steps
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Goal[0].Timeline)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Goal[0].Progress)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Goal[0].Learnings)
            </th>
            <th>
                Start Date
            </th>
            <th>
                End Date
            </th>
            <th>
                Completed
            </th>
            <th>
                Completion Notes
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>

        @foreach (var item in Model.Goal)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.Description)
                </td>

                <td style="text-align: center;">

                    @foreach (var step in Model.GoalSteps.Where(s => s.GoalId == item.GoalId))
                    {

                        <ul style="text-align: left;">
                            <li>
                                @Html.DisplayFor(modelItem => step.Step)
                            </li>
                        </ul>

                    }
                    
                    @if (!Model.GoalSteps.Any(s => s.GoalId == item.GoalId))
                    {
                        <a class="btn btn-primary"  asp-page="CreateSteps" asp-route-goalId="@item.GoalId">Add Steps</a>
                    }
                    else
                    {
                        <a class="btn btn-success" asp-page="EditStep" asp-route-goalId="@item.GoalId">Edit Steps</a>
                    }

                </td>

                <td>
                    @Html.DisplayFor(modelItem => item.Timeline)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Progress)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Learnings)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.StartDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.EndDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CompleteDate)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CompletionNotes)
                </td>
                <td>
                    <div class="icon-display">
                        <a asp-page="./Edit" asp-route-id="@item.GoalId">
                             <img src="~/img/edit-icon-png-3602.png" style="height: 30px; width: 30px;" alt="Edit Goal" title="Edit Goal">
                        </a>
                        <form asp-page-handler="Delete" method="post" asp-route-id="@item.GoalId" onsubmit="return confirm('Are you sure you want to delete this goal?');">
                            <button class="delete-button" type="submit">
                                <img src="~/img/garbage-bin-png-10491.png" style="height: 40px; width: 40px;" alt="Delete Goal" title="Delete Goal">
                            </button>
                        </form>
                    </div>
                    @if (Model.Feedbacks != null && Model.Feedbacks.Any(i => i.GoalId == item.GoalId))
                    {

                        // 1. Filter the feedback for the current goal
                        var goalFeedbacks = Model.Feedbacks.Where(i => i.GoalId == item.GoalId).ToList();

                        // 2. Project the data into a simpler format for JSON serialization
                        var dataToSerialize = goalFeedbacks.Select(f => new
                        {
                            FeedbackText = f.FeedbackText,
                            DateCreated = f.DateCreated.ToString("yyyy-MM-dd"), // Format date 
                            Reviewer = f.User != null ? f.User.FirstName + " " + f.User.LastName: "Unknown Reviewer"
                        });

                        // 3. Serialize the simplified data
                        var jsonFeedbacks = System.Text.Json.JsonSerializer.Serialize(dataToSerialize);

                        <button type="button"
                                class="feedback-button"
                                data-bs-toggle="modal"
                                data-bs-target="#feedbackModal"
                                data-goal-description="@item.Description"
                                data-feedbacks="@jsonFeedbacks">
                            <svg xmlns="http://www.w3.org/2000/svg" width="30" height="30" viewBox="0 0 24 24" fill="none" stroke="#000000" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"><path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-4z"></path><polyline points="22,6 12,13 2,6"></polyline></svg>
                        </button>
                    }
                    
                </td>
            </tr>
        }
    </tbody>
</table>


<div class="modal fade" id="feedbackModal" tabindex="-1" aria-labelledby="feedbackModalLabel" aria-hidden="true">
<div class="modal-dialog modal-lg">
    <div class="modal-content">
        <div class="modal-header">
            <h5 class="modal-title" id="feedbackModalLabel">Feedback</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
            <div id="feedbackContent">
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
    </div>
</div>
</div>

@section Scripts {
    <script>
        // Get the modal element
        var feedbackModal = document.getElementById('feedbackModal');

        // Check if the modal exists before adding the event listener
        if (feedbackModal) {
            // Listen for the 'show.bs.modal' event, which fires just before the modal is shown
            feedbackModal.addEventListener('show.bs.modal', function (event) {
                // Button that triggered the modal
                var button = event.relatedTarget;

                // Extract info from data attributes
                var goalDescription = button.getAttribute('data-goal-description');
                var feedbacksJson = button.getAttribute('data-feedbacks');

                // Parse the JSON string back into a JavaScript object (array)
                var feedbacks;
                try {
                    feedbacks = JSON.parse(feedbacksJson);
                } catch (e) {
                    console.error("Error parsing feedback JSON:", e);
                    feedbacks = [];
                }

                // Prepare the content for the modal body
                var feedbackContent = feedbackModal.querySelector('#feedbackContent');
                feedbackContent.innerHTML = ''; // Clear previous content

                if (feedbacks.length > 0) {
                    var htmlContent = '<div class="list-group">';

                    feedbacks.forEach(function(feedback) {
                        htmlContent += '<div class="list-group-item list-group-item-action flex-column align-items-start">';
                        htmlContent += '  <div class="d-flex w-100 justify-content-between">';
                        htmlContent += '    <h5 class="mb-1 text-primary">Staff Member: ' + (feedback.Reviewer || 'N/A') + '</h5>';
                        htmlContent += '    <small class="text-muted">' + (feedback.DateCreated || 'N/A') + '</small>';
                        htmlContent += '  </div>';
                        htmlContent += '  <p class="mb-1">' + (feedback.FeedbackText || 'No feedback provided.') + '</p>';
                        htmlContent += '</div>';
                    });

                    htmlContent += '</div>';
                    feedbackContent.innerHTML = htmlContent;

                } else {
                    feedbackContent.innerHTML = '<p class="alert alert-info">No feedback available for this goal.</p>';
                }
            });
        }
    </script>
}