@page
@model StudentPortfolio.Pages.Dashboard.DashboardModel
@{
    ViewData["Title"] = "Dashboard";
}

@section DashboardNav {
    <li class="nav-item">
        <a class="nav-link active" aria-current="page" asp-page="/Dashboard/Dashboard">Dashboard</a>
    </li>
}

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script>
        // make the dto into json so it is easier to deal with
        // was getting a circular dependency error so had to do this
        var groupedTrackersData = @Html.Raw(Json.Serialize(Model.GroupedTrackersDto));

        // go through trackers and group them by their level
        var levelCounts = {};
        groupedTrackersData.forEach(tracker => {

            // pull out level
            var level = tracker.level;
            if (levelCounts[level]) {

                // increment by one if there is a match
                levelCounts[level]++;
            } else {

                // create key with value 1 
                levelCounts[level] = 1;
            }
        });

        var labels = Object.keys(levelCounts);

        // num of each level
        var data = Object.values(levelCounts);

        var backgroundColors = labels.map(level => {
            switch (level) {
                case 'Developing':
                    return 'rgba(255, 99, 132, 0.7)'; // red
                case 'Emerging':
                    return 'rgba(255, 159, 64, 0.7)'; // orange
                case 'Capable':
                    return 'rgba(54, 162, 235, 0.7)'; // blue
                case 'Competent':
                    return 'rgba(75, 192, 192, 0.7)'; // greeny blue
                default:
                    return 'rgba(201, 203, 207, 0.7)'; // grey
            }
        });

        const ctx = document.getElementById('competencyPieChart');
        if (ctx) {
            new Chart(ctx, {
                type: 'pie',
                data: {
                    labels: labels, // array of names of the levels
                    datasets: [{
                        label: 'Competencies',
                        data: data, // values
                        backgroundColor: backgroundColors,
                        borderWidth: 1
                    }]
                },
                options: {
                    responsive: true, // resize with window
                    plugins: {
                        legend: {
                            position: 'top', // legend up the top
                        },
                        title: {
                            display: true,
                            text: 'Number of Competencies at Each Level'
                        }
                    }
                }
            });
        }
    </script>
}

<div class="container mt-4">
    <div class="row gy-5">

        <!-- left column -->
        <div class="col-md-6">
            <div class="card shadow-sm p-3 mb-4">
                <h2 class="mb-4">Competency Performance Summary</h2>
                @if (Model.GroupedTrackers.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th>Competency</th>
                                    <th>Number of Performance Self Evaluation Examples</th>
                                    <th>Highest Attainment Level</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tracker in Model.GroupedTrackers)
                                {
                                    <tr>
                                        <td>@tracker.Competency.Description</td>
                                        <td>@(Model.CompetencyCounts.TryGetValue(tracker.CompetencyId, out var count) ? count : 0)</td>
                                        <td>@tracker.Level</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No competency tracking data found for your account.</p>
                }
            </div>
        </div>

        <!-- right column -->
        <div class="col-md-6">
            <div class="card shadow-sm p-3 mb-4">
                <h2 class="mb-4">Competency Attainment Levels</h2>
                <div class="card-body">
                    <canvas id="competencyPieChart"></canvas>
                </div>
            </div>

            <div class="card shadow-sm p-3">
                <h2 class="mb-4">Needs More Focus</h2>
                @if (Model.LowestCompetencies.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered mb-0">
                            <thead class="table-dark">
                                <tr>
                                    <th>Competency</th>
                                    <th>Level</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var tracker in Model.LowestCompetencies)
                                {
                                    <tr>
                                        <td>@tracker.Competency.Description</td>
                                        <td>@tracker.Level</td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-muted">No competency data to display.</p>
                }
            </div>
        </div>
    </div>

    <div class="text-center mt-5">
        <a class="btn btn-primary btn-lg" asp-page="/Summary/Summary">View Summary</a>
    </div>
</div>
