// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StudentPortfolio.Data;

#nullable disable

namespace StudentPortfolio.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Certificates")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CoverLetter")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Degree")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Pitch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Resume")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Specialisation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.CareerDevelopmentPlan", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<short>("Year")
                        .HasColumnType("smallint")
                        .HasColumnName("year");

                    b.Property<string>("DevelopmentFocus")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("developmentFocus");

                    b.Property<string>("EmployersOfInterest")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("employersOfInterest");

                    b.Property<string>("Extracurricular")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("extracurricular");

                    b.Property<string>("NetworkingPlan")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("networkingPlan");

                    b.Property<string>("PersonalValues")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("personalValues");

                    b.Property<string>("ProfessionalInterests")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("professionalInterests");

                    b.HasKey("UserId", "Year");

                    b.ToTable("CareerDevelopmentPlan", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.Cdl", b =>
                {
                    b.Property<int>("CdlId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cdlId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CdlId"));

                    b.Property<DateTime>("DateCreated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("dateCreated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("lastUpdated")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Link")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("link");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("title");

                    b.HasKey("CdlId");

                    b.HasIndex(new[] { "CdlId" }, "UQ_CDL_CdlId")
                        .IsUnique();

                    b.ToTable("CDL", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.Competency", b =>
                {
                    b.Property<long>("CompetencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("competencyId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompetencyId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("lastUpdated")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<string>("LinkToIndicators")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("linkToIndicators");

                    b.Property<long?>("ParentCompetencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("parentCompetencyId");

                    b.HasKey("CompetencyId");

                    b.ToTable("Competency", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.CompetencyTracker", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.Property<long>("CompetencyId")
                        .HasColumnType("bigint")
                        .HasColumnName("competencyId");

                    b.Property<string>("Level")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasDefaultValue("Emerging")
                        .HasColumnName("level");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<DateOnly>("EndDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("endDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Evidence")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("evidence");

                    b.Property<DateTime>("LastUpdated")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("lastUpdated")
                        .HasDefaultValueSql("(sysdatetimeoffset())");

                    b.Property<string>("SkillsReview")
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("skillsReview");

                    b.Property<DateOnly>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("startDate")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "CompetencyId", "Level");

                    b.HasIndex("CompetencyId");

                    b.ToTable("CompetencyTracker", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.ContactsOfInterest", b =>
                {
                    b.Property<long>("ContactOfInterestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("contactOfInterestId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContactOfInterestId"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contactDetails");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("ContactOfInterestId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ContactOfInterestId" }, "UQ_ContactsOfInterest_Id")
                        .IsUnique();

                    b.ToTable("ContactsOfInterest", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.Goal", b =>
                {
                    b.Property<long>("GoalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("goalId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("GoalId"));

                    b.Property<DateOnly?>("CompleteDate")
                        .HasColumnType("date")
                        .HasColumnName("completeDate");

                    b.Property<string>("CompletionNotes")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("completionNotes");

                    b.Property<DateOnly>("DateSet")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("dateSet")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("endDate");

                    b.Property<string>("Learnings")
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)")
                        .HasColumnName("learnings");

                    b.Property<string>("Progress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("progress");

                    b.Property<DateOnly?>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasColumnName("startDate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Timeline")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("timeline");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("GoalId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "GoalId" }, "UQ_Goal_goalId")
                        .IsUnique();

                    b.ToTable("Goal", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.GoalStep", b =>
                {
                    b.Property<long>("StepId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("stepId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StepId"));

                    b.Property<long>("GoalId")
                        .HasColumnType("bigint")
                        .HasColumnName("goalId");

                    b.Property<string>("Step")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("step");

                    b.HasKey("StepId");

                    b.HasIndex("GoalId");

                    b.HasIndex(new[] { "StepId" }, "UQ_GoalSteps_stepId")
                        .IsUnique();

                    b.ToTable("GoalSteps");
                });

            modelBuilder.Entity("StudentPortfolio.Models.IndustryContactInfo", b =>
                {
                    b.Property<long>("ContactInfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("contactInfoId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContactInfoId"));

                    b.Property<string>("ContactDetails")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contactDetails");

                    b.Property<long>("ContactId")
                        .HasColumnType("bigint")
                        .HasColumnName("contactId");

                    b.Property<string>("ContactType")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("contactType");

                    b.HasKey("ContactInfoId");

                    b.HasIndex("ContactId");

                    b.HasIndex(new[] { "ContactInfoId" }, "UQ_IndustryContactInfo_Id")
                        .IsUnique();

                    b.ToTable("IndustryContactInfo", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.IndustryContactLog", b =>
                {
                    b.Property<long>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("contactId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ContactId"));

                    b.Property<string>("Company")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("company");

                    b.Property<DateOnly?>("DateMet")
                        .HasColumnType("date")
                        .HasColumnName("dateMet");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("notes");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("ContactId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "ContactId" }, "UQ_IndustryContactLog_contactId")
                        .IsUnique();

                    b.ToTable("IndustryContactLog", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.NetworkingEvent", b =>
                {
                    b.Property<long>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("eventId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EventId"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Details")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("details");

                    b.Property<string>("Location")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("name");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("EventId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "EventId" }, "UQ_NetworkingEvent_eventId")
                        .IsUnique();

                    b.ToTable("NetworkingEvent", (string)null);
                });

            modelBuilder.Entity("StudentPortfolio.Models.NetworkingQuestion", b =>
                {
                    b.Property<long>("NetworkingQuestionsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("networkingQuestionsId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("NetworkingQuestionsId"));

                    b.Property<long>("EventId")
                        .HasColumnType("bigint")
                        .HasColumnName("eventId");

                    b.Property<string>("Question")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("question");

                    b.HasKey("NetworkingQuestionsId");

                    b.HasIndex("EventId");

                    b.HasIndex(new[] { "NetworkingQuestionsId" }, "UQ_NetworkingQuestions_networkingQuestionsId")
                        .IsUnique();

                    b.ToTable("NetworkingQuestions");
                });

            modelBuilder.Entity("StudentPortfolio.Models.UserLink", b =>
                {
                    b.Property<long>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("linkId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LinkId"));

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2048)")
                        .HasColumnName("link");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("userId");

                    b.HasKey("LinkId");

                    b.HasIndex("UserId");

                    b.HasIndex(new[] { "LinkId" }, "UQ_UserLinks_linkId")
                        .IsUnique();

                    b.ToTable("UserLinks");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentPortfolio.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StudentPortfolio.Models.CareerDevelopmentPlan", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", "User")
                        .WithMany("CareerDevelopmentPlans")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CareerDevelopmentPlan_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentPortfolio.Models.CompetencyTracker", b =>
                {
                    b.HasOne("StudentPortfolio.Models.Competency", "Competency")
                        .WithMany("CompetencyTrackers")
                        .HasForeignKey("CompetencyId")
                        .IsRequired()
                        .HasConstraintName("FK_CompetencyTracker_Competency");

                    b.HasOne("StudentPortfolio.Models.ApplicationUser", "User")
                        .WithMany("CompetencyTrackers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_CompetencyTracker_AspNetUsers");

                    b.Navigation("Competency");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentPortfolio.Models.ContactsOfInterest", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", "User")
                        .WithMany("ContactsOfInterests")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContactsOfInterest_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentPortfolio.Models.Goal", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", "User")
                        .WithMany("Goals")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_Goal_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentPortfolio.Models.GoalStep", b =>
                {
                    b.HasOne("StudentPortfolio.Models.Goal", "Goal")
                        .WithMany("GoalSteps")
                        .HasForeignKey("GoalId")
                        .IsRequired()
                        .HasConstraintName("FK_GoalSteps_Goal");

                    b.Navigation("Goal");
                });

            modelBuilder.Entity("StudentPortfolio.Models.IndustryContactInfo", b =>
                {
                    b.HasOne("StudentPortfolio.Models.IndustryContactLog", "Contact")
                        .WithMany("IndustryContactInfos")
                        .HasForeignKey("ContactId")
                        .IsRequired()
                        .HasConstraintName("FK_IndustryContactInfo_IndustryContactLog");

                    b.Navigation("Contact");
                });

            modelBuilder.Entity("StudentPortfolio.Models.IndustryContactLog", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", "User")
                        .WithMany("IndustryContactLogs")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_IndustryContactLog_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentPortfolio.Models.NetworkingEvent", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", "User")
                        .WithMany("NetworkingEvents")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_NetworkingEvent_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentPortfolio.Models.NetworkingQuestion", b =>
                {
                    b.HasOne("StudentPortfolio.Models.NetworkingEvent", "Event")
                        .WithMany("NetworkingQuestions")
                        .HasForeignKey("EventId")
                        .IsRequired()
                        .HasConstraintName("FK_NetworkingQuestions_eventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("StudentPortfolio.Models.UserLink", b =>
                {
                    b.HasOne("StudentPortfolio.Models.ApplicationUser", "User")
                        .WithMany("UserLinks")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserLinks_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("StudentPortfolio.Models.ApplicationUser", b =>
                {
                    b.Navigation("CareerDevelopmentPlans");

                    b.Navigation("CompetencyTrackers");

                    b.Navigation("ContactsOfInterests");

                    b.Navigation("Goals");

                    b.Navigation("IndustryContactLogs");

                    b.Navigation("NetworkingEvents");

                    b.Navigation("UserLinks");
                });

            modelBuilder.Entity("StudentPortfolio.Models.Competency", b =>
                {
                    b.Navigation("CompetencyTrackers");
                });

            modelBuilder.Entity("StudentPortfolio.Models.Goal", b =>
                {
                    b.Navigation("GoalSteps");
                });

            modelBuilder.Entity("StudentPortfolio.Models.IndustryContactLog", b =>
                {
                    b.Navigation("IndustryContactInfos");
                });

            modelBuilder.Entity("StudentPortfolio.Models.NetworkingEvent", b =>
                {
                    b.Navigation("NetworkingQuestions");
                });
#pragma warning restore 612, 618
        }
    }
}
